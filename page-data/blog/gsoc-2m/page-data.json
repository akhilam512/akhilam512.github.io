{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/gsoc-2m","result":{"data":{"markdownRemark":{"html":"<p>Hi! It's been a while :)</p>\n<p>And sorry for that, I had planned to update last week but couldn't do so as I had few health issues but now I'm alright.</p>\n<h2>Progress on making the new Producer</h2>\n<p>From my understanding so far (forgive me for any mistakes that I might make - it's a different codebase and different concepts - I wholeheartedly welcome corrections and suggestions) the whole producer boils down to two parts - the actual producer code (which is in C and which is the thing which does the 'producer stuff') and the wrapper code (which 'wraps', supplements and does the actual rendering part of the QML frames). The wrapper files are responsible for mainly rendering the QML templates that are passed to it and make it available for the actual producer to use. And consequently, most of the work is to be done in the wrapper files, as the producer in itself doesn't change much as it will still do the same things like the existing XML producer (producer_kdenlivetitle.c) - such as loading a file, generating a frame, calling rendering methods from the wrapper files.</p>\n<p>So let's see what work has been done. Starting with the new producer file in mlt/src/modules/qt/producer_qml.c</p>\n<p><code class=\"language-text\">void read_qml(mlt_properties properties)</code></p>\n<p>As the name suggests, it opens a \"resource\" file and stores the QML file in the global mlt_properties which is passed.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">static int producer_get_image( mlt_frame frame, uint8_t **buffer, \n                                mlt_image_format *format, int *width, \n                                int *height, int writable )\n\n                                ```\nThis method takes in a frame and makes use of the wrapper file - it calls the method which does the rendering part in the wrapper files ( renderKdenliveTitle() ) and sets the rendered image using mlt_frame_set_image to the frame that was passed.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>static int producer<em>get</em>frame( mlt<em>producer producer, mlt</em>frame_ptr frame,\nint index )</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">This method generates a frame, calls producer_get_image() and sets a ready rendered frame for the producer, and prepares for the next frame.\n\nThe wrapper file has the following methods -</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>void loadQml( producer<em>ktitle</em>qml self, const char *templateQml )</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">What this method does is - it loads a QML file which is a pointer to a char array and does a bunch of stuff - it checks if it is valid, initialises few properties using mlt_properties_set() methods (width and height). The next method we have is -</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>void renderKdenliveTitle( producer<em>ktitle</em>qml self, mlt<em>frame frame,\nmlt</em>image<em>format format, int width, int height,\ndouble position, int force</em>refresh )</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">renderKdenliveTitle() does the rendering part - given a mlt_frame, format and its parameters. And here is where I use QmlRenderer - my last month&#39;s work - it renders QML. I refactored the code a bit to return a rendered QImage in the library. I make use of the renderSingleFrame() method which renders a QML frame for a given position (time)\n\nThe programming part in itself wasn&#39;t difficult (although it is far, far from a complete producer - there are a lot of memory leaks right now), understanding how all of it works together in a piece is what took the most effort - in fact it took me a little more than week just to understand and comprehend working of the producer codebase!\n\nFor most of the part, I believe 80% of the producer work is done. The plan is to get a working, solid producer by next week. Although the current code is still far from a ready producer although the whole structure is set and most of the refactoring that had to be be done in the QmlRenderer library in order to accommodate the producer methods is done.\n\nAlso, the build system for the [QmlRenderer lib](https://cgit.kde.org/scratch/akhilkgangadharan/QmlRenderer.git/) was revamped, it&#39;s a clean build system (thanks to Vincent), so for building, all you need to do is clone the repository and do this -</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>mkdir build\ncd build\nqmake -r ..\nmake\ncd bin\n./QmlRender -o /path/to/output/directory -i /path/to/input/QML/file</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Neat :)\n\nYou can view the code for the QML MLT producer [here](https://github.com/akhilam512/mlt/commits?author=akhilam512).</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>","excerpt":"Hi! It's been a while :) And sorry for that, I had planned to update last week but couldn't do so as I had few health issues but now I'm alright. Progress on…","frontmatter":{"date":"22 July, 2019","path":"/blog/gsoc-2m","title":"Month 2 in making the Titler – GSoC ’19"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}