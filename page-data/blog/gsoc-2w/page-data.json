{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/gsoc-2w","result":{"data":{"markdownRemark":{"html":"<p>Hello again!</p>\n<p>In the last week, I gained progress with the QML rendering library (see the code <a href=\"https://cgit.kde.org/scratch/akhilkgangadharan/QmlRenderer.git/\">here</a>)</p>\n<p>It is doing what it is supposed to do - it renders an input QML file to output frames of a specified format and renders it as quick as possible (with QQuickRenderControl). If you want to test it out - there is CLI access to it through an executable (which is one of the things I've been working in the last week) for the library <a href=\"https://cgit.kde.org/scratch/akhilkgangadharan/QmlRenderer.git/tree/test/run/exe\">in the test directory here</a> (make sure you read the READMEs along the way!)</p>\n<p>So let's try to understand what really happens at the core of the library i.e. the rendering part.</p>\n<p>To render QML, the obvious approach is to take 'screenshots' of each frame using a grab() method which would grab all the pixels at each instant of time and then render it - not only is this darned slow and expensive, it is also not possible to render at a custom frame rate that way.</p>\n<p>Here's where QQuickRenderControl comes into the picture. QQuickRenderControl is used for rendering Qt Quick content (read QML) onto something in a very controlled manner. If you read the official documentation, that 'something' is an 'offscreen render target' - emphasis on 'offscreen' - which means we can tell our dummy window or surface to render our QML onto something else (a QOpenGLFramebufferObject to be specific) and that too, in a very quick process as well!</p>\n<p>That was in words, now let's see some code - I do not want to confuse you (further) but this is essential because at the core of this library is this rendering.</p>\n<p>Before we start rendering, we need to setup QQuickRenderControl :</p>\n<ol>\n<li>Set up the the format of the surface on which we will be doing the rendering on.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">QSurfaceFormat format;  \nformat.setDepthBufferSize(16);  \nformat.setStencilBufferSize(8);</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<ol start=\"2\">\n<li>\n<p>Set up the OpenGL context</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">m_context = std::make_unique&lt;QOpenGLContext&gt;();  \nm_context-&gt;setFormat(format);  \nm_context-&gt;create();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>Set up the surface (dummy)</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">m_offscreenSurface = std::make_unique&lt;QOffscreenSurface&gt;();  \nm_offscreenSurface-&gt;setFormat(m_context-&gt;format());  \nm_offscreenSurface-&gt;create();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<ol start=\"4\">\n<li>\n<p>Set up RenderControl and target window (dummy)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">m_renderControl = std::make_unique&lt;QQuickRenderControl&gt;(this);  \nm_quickWindow = std::make_unique&lt;QQuickWindow&gt;(m_renderControl.get());  \nm_context-&gt;makeCurrent(m_offscreenSurface.get());  \nm_renderControl-&gt;initialize(m_context.get());</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>Create frame buffer object, and tell QuickWindow to render to this object</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">m_fbo = std::make_unique&lt;QOpenGLFramebufferObject&gt;(m_size * m_dpr,\n              QOpenGLFramebufferObject::CombinedDepthStencil);  \nm_quickWindow-&gt;setRenderTarget(m_fbo.get());</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>And with that, we can begin rendering but there's a catch - we cannot render at a custom frame rate yet, as I said before (and that is exactly what the <a href=\"https://blog.qt.io/blog/2017/02/21/making-movies-qml/\">blog</a> that I had earlier mentioned was trying to primarily address). To achieve this, we need to tweak the animation driver - we create our own animation driver and advance frames at our own pace:</p>\n</li>\n</ol>\n<p><code class=\"language-text\">void advance() override  \n{  \nm_elapsed += m_step;  \nadvanceAnimation();  \n}</code></p>\n<p>With that, and the next 4 lines (in an event driven loop, of course)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">m_renderControl-&gt;polishItems();  \nm_renderControl-&gt;sync();  \nm_renderControl-&gt;render();  \nm_context-&gt;functions()-&gt;glFlush();</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>You're rendering frames! (if you want to see this code in practice, have a look here <a href=\"https://cgit.kde.org/scratch/akhilkgangadharan/QmlRenderer.git/tree/src\">root/QmlRenderer/src/</a>)</p>\n<p>That's how it works - in my work so far here, I have made the above mentioned code, almost production ready.</p>\n<p>For the next week, I've already started writing unit tests to make sure the library works fine at all points in the future. And after that, I'll start tinkering with MLT and writing a MLT producer.</p>\n<p>And here's a question you might be having by now, why develop this as an independent library? Why not just directly integrate it with MLT?</p>\n<p>Because -\na) Modularity : Easier to test an independent piece of code and make sure it works.<br>\nb) Easy integration : It's easier to integrate a module with a framework - as there are discussions regarding MLT's future in Kdenlive.</p>\n<p>That's it for this week, let's hope for the best!</p>","excerpt":"Hello again! In the last week, I gained progress with the QML rendering library (see the code here) It is doing what it is supposed to do - it renders an input…","frontmatter":{"date":"12 June, 2019","path":"/blog/gsoc-2w","title":"GSoC 2019 – Week 2 with the Titler Tool"},"fields":{"readingTime":{"text":"4 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}